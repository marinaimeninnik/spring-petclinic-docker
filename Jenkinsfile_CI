pipeline {
    agent {
        label 'ubuntu22_04'
    }

    triggers {
        githubPush()
        pullRequest()
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('3fd6e258-dfed-4537-a548-c3272953e573')
        BUILD_VERSION = sh(script: 'echo $((BUILD_NUMBER + 0))', returnStatus: true)
        IMAGE_NAME = 'marinaimeninnik/petclinic'
        LATEST_TAG = 'latest'

    }

    stages {
        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }

  //       stage('Check Merge Request') {
  //           steps {
  //               script {
  //                  def payload = readFile "${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/github-pull-request-${BUILD_NUMBER}.json"
  //                  def jsonPayload = readJSON text: payload
  //
  //                  if (jsonPayload.action == 'synchronize' || jsonPayload.action == 'opened') {
  //                      echo 'GitHub webhook triggered the pipeline for a merge request'
  //                  } else {
  //                      echo 'GitHub webhook triggered the pipeline, but not for a merge request. Exiting...'
  //                      currentBuild.result = 'ABORTED'
  //                      error('Not a merge request. Aborting the pipeline.')
  //                  }
  //              }
  //          }
  //      }
    
        stage('Clone') {
            steps {
                git branch: 'main', url: 'https://github.com/marinaimeninnik/spring-petclinic-docker.git'
            }
        }

//        stage('Build app')
//             steps{
//                 sh "./mvnw package"
//             }

        stage('Scan with SonarQube') {
            steps {
                withSonarQubeEnv(installationName: 'SQ') { 
                    sh './mvnw package org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar'
                    sh 'echo "Hello"'
                }
            }
        }

        stage('Build Docker Image') {
            steps {                
                script {
                    sh "docker build -t ${IMAGE_NAME} . -f Dockerfile"
                }
            }
        }
        

        stage('Tag and Push') {
            steps {
                script {
                    def buildVersion = "1.0.${env.BUILD_NUMBER}"
                    sh "sudo docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${buildVersion}"
                    
                    withCredentials([usernamePassword(credentialsId: '3fd6e258-dfed-4537-a548-c3272953e573', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
                        sh "sudo docker login -u $DOCKERHUB_CREDENTIALS_USR -p $DOCKERHUB_CREDENTIALS_PSW"
                        sh "sudo docker push ${IMAGE_NAME}:${buildVersion}"
                        sh "sudo docker push ${IMAGE_NAME}:latest"
                    }
                }
            }
        }
    }

    post {
        always {
        sh 'docker logout'
        }
    }
}

   

