pipeline {
    agent {
        label 'ubuntu22_04'
    }

    parameters{
        string(name: 'publicIp', defaultValue: '18.159.208.8', description: 'Enter public ip target deployment machine')
        choice(name: 'environment', choices: ['dev', 'qa'], description: 'Select environment for deployment')
        reactiveChoice(choiceType: 'PT_SINGLE_SELECT',
                       description: 'Choose docker image version',
                       filterLength: 1,
                       filterable: false,
                       name: 'dockerTag',
                       randomName: 'choice-parameter-7767039862856',
                       referencedParameters: '',
                       script: groovyScript(
                        fallbackScript: [classpath: [],
                                         oldScript: '',
                                         sandbox: false,
                                         script: ''],
                                         script: [classpath: [],
                                            oldScript: '',
                                            sandbox: false,
                                                script: '''def dockerImage = "marinaimeninnik/petclinic"
                                                        sh(script: "docker image ls ${dockerImage} --format \'{{.Tag}}\'", returnStdout: true).trim().split(\'\\n\').toList()'''
                                                ]
                        )
                    )
    }
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('3fd6e258-dfed-4537-a548-c3272953e573')
    }

    stages {
        stage('Clean workspace'){
            steps {
                cleanWs()
            }
        }

        stage('Get Docker Image Tags') {
            steps {
                script {
                    def dockerImage = "marinaimeninnik/petclinic"
                    def dockerTags = sh(script: "docker image ls ${dockerImage} --format '{{.Tag}}'", returnStdout: true).trim().split('\n').toList()
                    echo "Docker Image Tags: ${dockerTags}"
                    properties([
                        parameters([
                            choice(choices: dockerTags, description: 'Select Docker Image Tag', name: 'DOCKER_IMAGE_TAG')
                        ])
                    ])
                }
            }
        }

        stage('Run container on chosen server') {
            steps {
                script {
                    if (params.environment == 'dev' || params.environment == 'qa') {
                        withCredentials([usernamePassword(credentialsId: '3fd6e258-dfed-4537-a548-c3272953e573', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
                            def dockerRun = 'sudo docker run -p 8080:8080 -d marinaimeninnik/petclinic:latest'
                            def dockerLogin = 'sudo docker login -u $DOCKERHUB_CREDENTIALS_USR -p $DOCKERHUB_CREDENTIALS_PSW'
                            def serverName = params.environment == 'dev' ? 'dev-server' : 'qa-server'

                            sshagent([serverName]) {
                                // sh "ssh -o StrictHostKeyChecking=no ubuntu@${publicIp} echo 'hey you there'"
                                sh "ssh -o StrictHostKeyChecking=no ubuntu@${publicIp} ${dockerLogin}"
                                // sh "ssh -o StrictHostKeyChecking=no ubuntu@${publicIp} ${dockerRun}"
                            }
                        }
                    } else {
                        error "Invalid environment specified."
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    def healthCheckCommand = "curl -s http://${publicIp}:8080 | grep -q '<!DOCTYPE html>'"
                    def retries = 0
                    def maxRetries = 10

                    while (retries < maxRetries) {
                        def healthCheckResult = sh(script: healthCheckCommand, returnStatus: true)
                        if (healthCheckResult == 0) {
                            echo 'Application is healthy'
                            break
                        } else {
                            echo 'Application is not healthy yet, retrying in 30 seconds...'
                            sleep 30
                            retries++
                        }
                    }

                    if (retries == maxRetries) {
                        error 'Application did not become healthy within the allotted time'
                    }
                }
            }
        }
    }
}
