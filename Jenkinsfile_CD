pipeline {
    agent {
        label 'ubuntu22_04'
    }

    parameters{
        string(name: 'publicIp', defaultValue: '3.70.166.62', description: 'Enter public ip target deployment machine')
        choice(name: 'environment', choices: ['dev', 'qa'], description: 'Select environment for deployment')
    }
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('3fd6e258-dfed-4537-a548-c3272953e573')
        RETRIES = 6 // Number of retries
        RETRY_INTERVAL = 30 // Seconds between retries
    }

    stages {
        stage('Clean workspace'){
            steps {
                cleanWs()
            }
        }

        stage('Run container on chosen server') {
            steps {
                script {
                    if (params.environment == 'dev' || params.environment == 'qa') {
                        withCredentials([usernamePassword(credentialsId: '3fd6e258-dfed-4537-a548-c3272953e573', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
                            def dockerRun = 'sudo docker run -p 8080:8080 -d marinaimeninnik/petclinic:latest'
                            def dockerLogin = 'sudo docker login -u $DOCKERHUB_CREDENTIALS_USR -p $DOCKERHUB_CREDENTIALS_PSW'
                            def serverName = params.environment == 'dev' ? 'dev-server' : 'qa-server'

                            sshagent([serverName]) {
                                // sh "ssh -o StrictHostKeyChecking=no ubuntu@${publicIp} echo 'hey you there'"
                                sh "ssh -o StrictHostKeyChecking=no ubuntu@${publicIp} ${dockerLogin}"
                                // sh "ssh -o StrictHostKeyChecking=no ubuntu@${publicIp} ${dockerRun}"
                            }
                        }
                    } else {
                        error "Invalid environment specified."
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    def ready = false
                    for (int i = 0; i < RETRIES; i++) {
                        def response = sh(script: "curl -Is http://${publicIp}:8080", returnStatus: true, returnStdout: true)
                        def exitCode = response

                        if (exitCode == 0) {
                            def responseBody = response
                            if (responseBody =~ /HTTP\/1\.\d+ 200 OK/) {
                                ready = true
                                break
                            }
                        }

                        sleep(time: RETRY_INTERVAL, unit: 'SECONDS')
                    }

                    if (ready) {
                        echo "Server is ready."
                        // You can proceed with additional steps or tests here
                    } else {
                        error "Server did not become ready in a reasonable time."
                    }
                }
            }
        }
    }
}
